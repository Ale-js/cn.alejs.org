<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ale.js</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://cn.alejs.org/"/>
  <updated>2018-12-13T11:39:28.013Z</updated>
  <id>http://cn.alejs.org/</id>
  
  <author>
    <name>Bill Dong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Ale组件对象</title>
    <link href="http://cn.alejs.org/2018/12/05/aleCom-1X/"/>
    <id>http://cn.alejs.org/2018/12/05/aleCom-1X/</id>
    <published>2018-12-04T16:00:00.000Z</published>
    <updated>2018-12-13T11:39:28.013Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ale组件对象"><a href="#Ale组件对象" class="headerlink" title="Ale组件对象"></a>Ale组件对象</h1><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>可能你在之前的教程里已经了解过了，在你每次 <code>use</code> 组件时，<code>Ale.js</code> 都会返回一个 <code>Ale组件对象</code>，你可以定义一个变量来接收它：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var aleCom = Ale.use(&#123;</span><br><span class="line">    name: &quot;test&quot;,</span><br><span class="line">    el: &quot;#app&quot;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>之后，你可以用你的接收变量来使用任何 <code>Ale组件对象</code> 提供的操作，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aleCom.nextState();</span><br></pre></td></tr></table></figure><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>以下为全部 <code>Ale组件对象</code> 拥有的操作和属性：<strong>（请注意，后缀加小括号的为函数，不加的为值）</strong></p><ul><li>el【此组件包括的元素list】</li><li>template【此组件模板】</li><li>nowState 【当前state】</li><li>destroy() 【销毁此 Ale组件对象，同时在真实DOM里销毁全部此组件】</li><li>changeState() 【改变一个状态，接收一个 object 类型的参数，不会影响 nowState】</li><li>nextStates() 【进入下一个状态】</li><li>backStates() 【返回上一个状态】</li><li>addStates() 【增加一个或多个状态，接收一个数组】</li><li>removeStates() 【删除一个状态】</li><li>setStates() 【设置状态，接受一个数组，会覆盖当前状态】</li><li>statesLength() 【返回全部状态长度】</li><li>changeData() 【改变一个或多个数据】</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Ale组件对象&quot;&gt;&lt;a href=&quot;#Ale组件对象&quot; class=&quot;headerlink&quot; title=&quot;Ale组件对象&quot;&gt;&lt;/a&gt;Ale组件对象&lt;/h1&gt;&lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>组件权限</title>
    <link href="http://cn.alejs.org/2018/12/04/permissionCom-1X/"/>
    <id>http://cn.alejs.org/2018/12/04/permissionCom-1X/</id>
    <published>2018-12-03T16:00:00.000Z</published>
    <updated>2018-12-13T06:55:13.733Z</updated>
    
    <content type="html"><![CDATA[<h1 id="组件权限"><a href="#组件权限" class="headerlink" title="组件权限"></a>组件权限</h1><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>在组件被定义时，你可以给组件添加权限（使用一个 <code>permissions</code> 参数来添加）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Ale.define(&#123;</span><br><span class="line">    name: &quot;test&quot;,</span><br><span class="line">    template: &quot;尝试在控制台中输入 aleCom.nextStates()&quot;,</span><br><span class="line">    permissions: &#123;</span><br><span class="line">        nextStates: false</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p id="app" class="demo"><br></p><p>其中，<code>permissions</code> 参数需要的是一个 <code>Object</code> 对象，一个 <code>Ale组件对象</code> 的函数对着一个布尔值，</p><p>当对值为 <code>true</code> 时，代表操作允许，当值为 <code>false</code> 时，代表操作不被允许（所有操作默认为 <code>true</code> 权限）。</p><p><br></p><p>以下为 <code>permissions</code> 参数支持的全部 <code>Ale组件对象</code> 的函数名称：</p><ul><li>changeState</li><li>nextStates</li><li>addStates</li><li>removeStates</li><li>setStates</li><li>backStates</li><li>changeData</li></ul><script src="/js/Ale.min1X.js"></script><script>Ale.define({    name: "test",    template: "尝试在控制台中输入 aleCom.nextStates()",    permissions: {        nextStates: false    }})var aleCom = Ale.use({    name: "test",    el: "#app"})</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;组件权限&quot;&gt;&lt;a href=&quot;#组件权限&quot; class=&quot;headerlink&quot; title=&quot;组件权限&quot;&gt;&lt;/a&gt;组件权限&lt;/h1&gt;&lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Ale组件对象</title>
    <link href="http://cn.alejs.org/2018/12/03/aleCom/"/>
    <id>http://cn.alejs.org/2018/12/03/aleCom/</id>
    <published>2018-12-02T16:00:00.000Z</published>
    <updated>2018-12-10T03:42:51.040Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ale组件对象"><a href="#Ale组件对象" class="headerlink" title="Ale组件对象"></a>Ale组件对象</h1><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>可能你在之前的教程里已经了解过了，在你每次 <code>use</code> 组件时，<code>Ale.js</code> 都会返回一个 <code>Ale组件对象</code>，你可以定义一个变量来接收它：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var aleCom = Ale.use(&#123;</span><br><span class="line">    name: &quot;test&quot;,</span><br><span class="line">    el: &quot;#app&quot;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>之后，你可以用你的接收变量来使用任何 <code>Ale组件对象</code> 提供的操作，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aleCom.nextState();</span><br></pre></td></tr></table></figure><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>以下未全部 <code>Ale组件对象</code> 支持的操作：</p><ul><li>nowState 【当前state】</li><li>destroy() 【销毁此 Ale组件对象，同时在真实DOM里销毁全部此组件】</li><li>changeState() 【改变一个状态，接收一个 object 类型的参数，不会影响 nowState】</li><li>nextState() 【进入下一个状态】</li><li>backState() 【返回上一个状态】</li><li>addState() 【增加一个或多个状态，接收一个数组】</li><li>removeState() 【删除一个状态】</li><li>setState() 【设置状态，接受一个数组，会覆盖当前状态，同时 nowState 的值变为 0】</li><li>allState() 【返回全部状态长度】</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Ale组件对象&quot;&gt;&lt;a href=&quot;#Ale组件对象&quot; class=&quot;headerlink&quot; title=&quot;Ale组件对象&quot;&gt;&lt;/a&gt;Ale组件对象&lt;/h1&gt;&lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>数据</title>
    <link href="http://cn.alejs.org/2018/12/03/dataCom/"/>
    <id>http://cn.alejs.org/2018/12/03/dataCom/</id>
    <published>2018-12-02T16:00:00.000Z</published>
    <updated>2018-12-13T06:17:19.571Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h1><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>在 <code>1.0</code> 版本里，我们添加了一个新的属性 - <code>data</code></p><p><code>data</code> 用来设置数据，你可以在定义组件时添加一个名为 <code>data</code> 的参数，也可以在使用组件时动态添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/* 定义组件时添加 */</span><br><span class="line">Ale.define(&#123;</span><br><span class="line">    name: &quot;test&quot;,</span><br><span class="line">    template: &quot;Hello&quot;,</span><br><span class="line">    data: &#123; /* 这里添加data */</span><br><span class="line">        str: &quot;World&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/* 使用组件时动态添加 */</span><br><span class="line">Ale.use(&#123;</span><br><span class="line">    name: &quot;test&quot;,</span><br><span class="line">    el: &quot;#app&quot;,</span><br><span class="line">    data: &#123; /* 这里添加data */</span><br><span class="line">        str: &quot;World&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>如果你在使用组件时动态添加数据，那么在定义时添加的 <strong>重名</strong> 数据将会被覆盖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Ale.define(&#123;</span><br><span class="line">    name: &quot;test&quot;,</span><br><span class="line">    template: &quot;Hello&quot;,</span><br><span class="line">    data: &#123;</span><br><span class="line">        str: &quot;World&quot;, /* str被覆盖了 */</span><br><span class="line">        str2: &quot;Hello&quot; /* str2没有被覆盖！一定要注意！ */</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">Ale.use(&#123;</span><br><span class="line">    name: &quot;test&quot;,</span><br><span class="line">    el: &quot;#app&quot;,</span><br><span class="line">    data: &#123;</span><br><span class="line">        str: &quot;World&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>那么我们已经定义数据了，如何去使用呢？很简单，只需要把 <strong>支持函数</strong> 的参数的值设置为函数，那么这个函数就会自动将 <code>this</code> 绑定为 <code>data</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Ale.define(&#123;</span><br><span class="line">    name: &quot;test&quot;,</span><br><span class="line">    template: function()&#123;</span><br><span class="line">        return &quot;Hello &quot; + this.str; /* 这里用 return 返回原始属性需要的值 */</span><br><span class="line">    &#125;,</span><br><span class="line">    data: &#123;</span><br><span class="line">        str: &quot;World&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">Ale.use(&#123;</span><br><span class="line">    name: &quot;test&quot;,</span><br><span class="line">    el: &quot;#app&quot;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p id="app" class="demo"><br><br></p><p>很简单吧？那么以下表格列出了全部支持函数的属性：</p><ul><li>template</li><li>states</li><li>events</li></ul><p><strong>现在有些属性可能你还不了解，不过请继续查看我们的教程！</strong></p><p>当然，仅仅靠着数据可以被动态赋值的特性还不能很好地诠释数据的灵活性，那么接下来有一个函数 - <code>changeData</code></p><p><code>changeData</code> 函数能够动态的修改数据的值，让你全身心投入在数据之上。<code>changeData</code> 函数是 <code>Ale组件对象</code> 的其中一个函数，那么你只需要这么调用它：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ale组件对象.changeData();</span><br></pre></td></tr></table></figure><p>同时，changeData函数接收<code>2个字符串</code>参数，或<code>1个object</code>参数。</p><p>当你传入的为<code>2个字符串</code>参数时，第一个参数为要修改的data属性名称，第二个参数为传入的新值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/* 修改data的str属性的值，改为Ale.js */</span><br><span class="line">Ale组件对象.changeData(&quot;str&quot;, &quot;Ale.js&quot;);</span><br></pre></td></tr></table></figure><p>当你传入的为<code>1个object</code>参数时，你可以这么写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/* 修改data的str属性的值和str2属性的值，都改为Ale.js */</span><br><span class="line">Ale组件对象.changeData(&#123;</span><br><span class="line">    str: &apos;Ale.js&apos;,</span><br><span class="line">    str2: &apos;Ale.js&apos;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>当你调用这个函数并且传入了需要的值时，所有应用这个值的属性都会得到更新，所以，现在请在当前页面的控制台中输入 <code>app.changeData(&quot;str&quot;, &quot;新消息&quot;);</code> 吧，你会看到下方实例的值动态更新：</p><p class="demo" id="app2"></p><p>上方实例代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Ale.define(&#123;</span><br><span class="line">    name: &quot;test&quot;,</span><br><span class="line">    template: function()&#123;</span><br><span class="line">        return &quot;Hello &quot; + this.str;</span><br><span class="line">    &#125;,</span><br><span class="line">    data: &#123;</span><br><span class="line">        str: &quot;World&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">var app = Ale.use(&#123;</span><br><span class="line">    name: &quot;test&quot;,</span><br><span class="line">    el: &quot;#app2&quot;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><script src="/js/Ale.min1X.js"></script><script>Ale.define({    name: "test",    template: function(){        return "Hello " + this.str;    },    data: {        str: "World"    }})Ale.use({    name: "test",    el: "#app"})var app = Ale.use({    name: "test",    el: "#app2"})</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据&quot;&gt;&lt;a href=&quot;#数据&quot; class=&quot;headerlink&quot; title=&quot;数据&quot;&gt;&lt;/a&gt;数据&lt;/h1&gt;&lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;p&gt;在 &lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>State</title>
    <link href="http://cn.alejs.org/2018/12/02/stateCom-1X/"/>
    <id>http://cn.alejs.org/2018/12/02/stateCom-1X/</id>
    <published>2018-12-01T16:00:00.000Z</published>
    <updated>2018-12-13T05:44:03.476Z</updated>
    
    <content type="html"><![CDATA[<h1 id="State"><a href="#State" class="headerlink" title="State"></a>State</h1><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>State（状态）是增强组件灵活性的最重要的手段，简单来说，每一种参数都是一个状态，例如：（反过来说，如果一个组件不需要参数，那么它也不需要状态）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/* 一种状态 */</span><br><span class="line">&#123;</span><br><span class="line">    str: &quot;Hello&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 第二种状态 */</span><br><span class="line">&#123;</span><br><span class="line">    str: &quot;OK&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 第三种状态 */</span><br><span class="line">&#123;</span><br><span class="line">    str: &quot;World&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>状态可以在组件定义时被添加（添加一个参数<code>states</code>），也可以在 <code>use</code> 之后动态添加，且一个组件可以有多个状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/* 在定义时添加 */</span><br><span class="line">Ale.define(&#123;</span><br><span class="line">    name: &quot;test&quot;,</span><br><span class="line">    template: &quot;Hello &#123;&#123;=$name$&#125;&#125;&quot;,</span><br><span class="line">    states: [&#123; /* 注意！这里是数组！ */</span><br><span class="line">        name: &quot;Ale.js&quot;</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        name: &quot;Ale.js!!!!&quot;</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/* 也可以在 use 之后动态添加（会覆盖定义时指定的值） */</span><br><span class="line">var app = Ale.use(&#123;</span><br><span class="line">    name: &quot;test&quot;,</span><br><span class="line">    el: &quot;#app&quot;,</span><br><span class="line">    states: [&#123; /* 注意！这里是数组！ */</span><br><span class="line">        name: &quot;Ale.js&quot;</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        name: &quot;Ale.js!!!!&quot;</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>完成之后：</p><p id="app" class="demo"></p><p>此时我们来测试一下组件的状态是否添加完毕了，要怎么测试呢，只需要在控制台（就在这个页面打开）中输入 <code>app.nextStates()</code>，你就会发现上方实例的值变化了。</p><p>当然，有 next 就有 back，现在让我们输入 <code>app.backStates()</code>，让组件的状态回去吧！</p><p><br></p><p>这时，你可能会想，我们并没有指定默认状态是哪个状态，那么 <code>Ale.js</code> 是怎么区分的呢？</p><p><br></p><p>实际上，当你定义或使用一个组件时，有一个参数可以指定具体的默认状态，它就是<code>defaultState</code>参数。</p><p><code>defaultState</code>参数的默认值为0，而 <code>0</code> 就相当于第一个状态（因为数组从0开始），所以你会发现上一个实例可以正常工作，如果我们手动在定义组件或使用组件时指定<code>defaultState</code>参数的值，那么这个组件的默认状态就会发生改变：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/* 在定义时指定 */</span><br><span class="line">Ale.define(&#123;</span><br><span class="line">    name: &quot;test&quot;,</span><br><span class="line">    template: &quot;Hello &#123;&#123;=$name$&#125;&#125;&quot;,</span><br><span class="line">    states: [&#123; /* 注意！这里是数组！ */</span><br><span class="line">        name: &quot;Ale.js&quot;</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        name: &quot;Ale.js!!!!&quot;</span><br><span class="line">    &#125;],</span><br><span class="line">    defaultState: 1</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/* 也可以在 use 之后动态指定（会覆盖定义时指定的值） */</span><br><span class="line">var app = Ale.use(&#123;</span><br><span class="line">    name: &quot;test&quot;,</span><br><span class="line">    el: &quot;#app&quot;,</span><br><span class="line">    states: [&#123; /* 注意！这里是数组！ */</span><br><span class="line">        name: &quot;Ale.js&quot;</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        name: &quot;Ale.js!!!!&quot;</span><br><span class="line">    &#125;],</span><br><span class="line">    defaultState: 1</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>效果：</p><p id="app2" class="demo"></p><h3 id="函数列表"><a href="#函数列表" class="headerlink" title="函数列表"></a>函数列表</h3><p>以下列表为 <code>Ale组件对象</code> 内置的全部和 <code>State</code> 有关的函数或属性：</p><ul><li>nextStates(steps) 【前进一个状态】<strong>（可以指定一个参数，用来前进多少步）</strong></li><li>backStates(steps) 【后退一个状态】<strong>（可以指定一个参数，用来后退多少步）</strong></li><li>changeState(obj) 【改变一个状态，需要一个object类型的参数】</li><li>addStates(arr) 【增加一个或多个状态，需要一个array类型的参数】</li><li>removeStates(steps) 【删除一个或多个状态】<strong>（可以指定一个参数，用来删除多少步）</strong></li><li>setStates(arr) 【设置状态，需要一个array类型的参数】</li><li>statesLength() 【返回组件有多少个状态】</li></ul><script src="/js/Ale.min1X.js"></script><script>Ale.define({    name: "test",    template: "Hello \{\{\=\$name\$\}\}",    states: [{        name: "Ale.js"    }, {        name: "Ale.js!!!!"    }]})var app = Ale.use({    name: "test",    el: "#app"})var app = Ale.use({    name: "test",    el: "#app2",    defaultState: 1})</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;State&quot;&gt;&lt;a href=&quot;#State&quot; class=&quot;headerlink&quot; title=&quot;State&quot;&gt;&lt;/a&gt;State&lt;/h1&gt;&lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>组件权限</title>
    <link href="http://cn.alejs.org/2018/12/02/permissionCom/"/>
    <id>http://cn.alejs.org/2018/12/02/permissionCom/</id>
    <published>2018-12-01T16:00:00.000Z</published>
    <updated>2018-12-10T06:12:17.683Z</updated>
    
    <content type="html"><![CDATA[<h1 id="组件权限"><a href="#组件权限" class="headerlink" title="组件权限"></a>组件权限</h1><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>在组件被定义时，你可以给组件添加权限（使用一个 <code>permissions</code> 参数来添加）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Ale.define(&#123;</span><br><span class="line">    name: &quot;test&quot;,</span><br><span class="line">    template: &quot;尝试在控制台中输入 aleCom.nextState()&quot;,</span><br><span class="line">    permissions: &#123;</span><br><span class="line">        nextState: false</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p id="app" class="demo"><br></p><p>其中，<code>permissions</code> 参数需要的是一个 <code>Object</code> 对象，一个 <code>Ale组件对象</code> 的函数对着一个布尔值，</p><p>当对值为 <code>true</code> 时，代表操作允许，当值为 <code>false</code> 时，代表操作不被允许（所有操作默认为 <code>true</code> 权限）。</p><p><br></p><p>以下为 <code>permissions</code> 参数支持的全部 <code>Ale组件对象</code> 的函数名称：</p><ul><li>changeState</li><li>nextState</li><li>addState</li><li>removeState</li><li>setState</li><li>backState</li></ul><script src="/js/Ale.min.js"></script><script>Ale.define({    name: "test",    template: "尝试在控制台中输入 aleCom.nextState()",    permissions: {        nextState: false    }})var aleCom = Ale.use({    name: "test",    el: "#app"})</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;组件权限&quot;&gt;&lt;a href=&quot;#组件权限&quot; class=&quot;headerlink&quot; title=&quot;组件权限&quot;&gt;&lt;/a&gt;组件权限&lt;/h1&gt;&lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>组件基础</title>
    <link href="http://cn.alejs.org/2018/12/01/basicCom-1X/"/>
    <id>http://cn.alejs.org/2018/12/01/basicCom-1X/</id>
    <published>2018-11-30T16:00:00.000Z</published>
    <updated>2018-12-13T02:31:12.854Z</updated>
    
    <content type="html"><![CDATA[<h1 id="组件基础"><a href="#组件基础" class="headerlink" title="组件基础"></a>组件基础</h1><h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><p>你可以使用 <code>Ale.define</code> 函数来定义一个组件，最基础的组件至少要有两个参数（name和template）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/* 定义一个test组件 */</span><br><span class="line">Ale.define(&#123;</span><br><span class="line">    name: &quot;test&quot;, /* 组件名称 */</span><br><span class="line">    template: &quot;Hello World&quot; /* 组件模板 */</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>之后我们使用 <code>Ale.use</code> 函数使用一个组件，注意 <code>name</code> 要一样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Ale.use(&#123;</span><br><span class="line">    name: &quot;test&quot;, /* 组件名称 */</span><br><span class="line">    el: &quot;#app&quot; /* 目标元素 */</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>之后我们就可以看到这个组件已经被渲染出来了：</p><p id="app" class="demo"></p><p class="info-box">注意！在组件每次渲染时，目标元素里的innerHTML属性都将被清空！所以请不要将一个有着其他信息的 DOM 元素作为组件的目标元素！</p><p>当然，你还可以在 <code>template</code> 参数里面写上 <code>Alen</code> 的模板语法，具体模板语法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; &#125;&#125; 执行一段js代码，不输出（双大括号内支持空格）</span><br><span class="line">&#123;&#123;= &#125;&#125; 执行一段js代码，并输出（双大括号内支持空格，但是请不要在 = 号前方空格！否则只会执行，不会输出）【不转义HTML】</span><br><span class="line">&#123;&#123;=! &#125;&#125; 执行一段js代码，并输出（双大括号内支持空格，但是请不要在 = 号前方空格！否则只会执行，不会输出）【转义HTML】</span><br><span class="line"></span><br><span class="line">在 模板 里，你需要使用一对 $ 来包裹在 data 里定义的变量名：</span><br><span class="line">&#123;&#123;=$var$&#125;&#125;</span><br><span class="line"></span><br><span class="line">如果你是在模板里定义的变量，则不需要一对 $</span><br><span class="line">&#123;&#123;var var1 = &quot;Hello&quot;; alert(var1)&#125;&#125;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Ale.define(&#123;</span><br><span class="line">    name: &quot;test2&quot;, /* 组件名称 */</span><br><span class="line">    template: &quot;Hello &#123;&#123;=$name$&#125;&#125;&quot; /* 组件模板 */</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>当然，如果你只在 <code>template</code> 参数里面写上模板语法的话，将没有任何效果，所以我们还需要添加一个叫 <code>states</code> 的参数：（了解具体<code>states</code>参数，请访问之后的教程）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Ale.define(&#123;</span><br><span class="line">    name: &quot;test2&quot;, /* 组件名称 */</span><br><span class="line">    template: &quot;Hello &#123;&#123;=$name$&#125;&#125;&quot;, /* 组件模板 */</span><br><span class="line">    states: [&#123; /* 定义状态 */</span><br><span class="line">        name: &quot;Ale.js&quot;</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>结果：</p><p id="app2" class="demo"></p><p>每当你 <code>use</code> 一个组件时，use函数都会返回一个 <code>Ale组件对象</code>，你可以定义一个变量来接受它：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var aleCom = Ale.use(&#123;</span><br><span class="line">    name: &quot;test2&quot;,</span><br><span class="line">    el: &quot;#app3&quot;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>具体 <code>Ale组件对象</code> 有什么用，请参考之后的教程。</p><h3 id="Ready"><a href="#Ready" class="headerlink" title="Ready?"></a>Ready?</h3><p>准备好了吗？你已经了解了组件的最基本的一些技能，现在请继续往下阅读吧！</p><script src="/js/Ale.min1X.js"></script><script>Ale.define({    name: "test",    template: "Hello World"})Ale.use({    name: "test",    el: "#app"})Ale.define({    name: "test2",    template: "Hello \{\{\=\$name\$\}\}",    states: [{        name: "Ale.js"    }]})Ale.use({    name: "test2",    el: "#app2"})</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;组件基础&quot;&gt;&lt;a href=&quot;#组件基础&quot; class=&quot;headerlink&quot; title=&quot;组件基础&quot;&gt;&lt;/a&gt;组件基础&lt;/h1&gt;&lt;h3 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot; class=&quot;headerlink&quot; title=&quot;开始&quot;&gt;&lt;/a&gt;开始&lt;/h
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>生命周期</title>
    <link href="http://cn.alejs.org/2018/12/01/lifeCom/"/>
    <id>http://cn.alejs.org/2018/12/01/lifeCom/</id>
    <published>2018-11-30T16:00:00.000Z</published>
    <updated>2018-12-13T06:46:55.967Z</updated>
    
    <content type="html"><![CDATA[<h1 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h1><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>在 <code>Ale.js</code> 里，一个组件在它的生命周期里有这么几种状态：</p><ul><li>Using （组件被使用时）</li><li>Mounting （组件被插入真实DOM时）</li><li>Rendering （组件被渲染时）</li><li>Unmounting （组件被移出真实DOM时）</li><li>Destroy （组件被销毁时）</li></ul><p>（更多的生命周期状态将在 <code>1.0</code> 版本被加入）</p><p>我们允许你在组件定义时设置生命周期，但你不能在组件被使用时设置（只需添加一个参数 - <code>life</code>）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Ale.define(&#123;</span><br><span class="line">    name: &quot;test&quot;,</span><br><span class="line">    template: &quot;Hello World&quot;,</span><br><span class="line">    life: &#123; /* 上方列表的每一种状态都对应着一个函数 */</span><br><span class="line">        Using: function()&#123;</span><br><span class="line">            /* 使用时 */</span><br><span class="line">            alert(&quot;Used!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p id="app" class="demo"><button onclick="useCom()">点我使用 test 组件</button></p><p><code>Using</code> 函数将会在组件被使用时触发，同时组件使用时还会触发 <code>Rendering</code> 和 <code>Mounting</code> 函数</p><p><br></p><p>之后组件每次状态的更改影响的真实 DOM 的更新，都会触发 <code>Rendering</code> 函数</p><p><br></p><p>当组件被销毁时，将会触发 <code>Unmounting</code> 和 <code>Destroy</code> 函数</p><script src="/js/Ale.min1X.js"></script><script>Ale.define({    name: "test",    template: "Hello World",    life: {        Using: function(){            alert("Used!");        }    }})function useCom(){    Ale.use({        el: "#app",        name: "test"    })}</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;生命周期&quot;&gt;&lt;a href=&quot;#生命周期&quot; class=&quot;headerlink&quot; title=&quot;生命周期&quot;&gt;&lt;/a&gt;生命周期&lt;/h1&gt;&lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>事件</title>
    <link href="http://cn.alejs.org/2018/11/30/events/"/>
    <id>http://cn.alejs.org/2018/11/30/events/</id>
    <published>2018-11-29T16:00:00.000Z</published>
    <updated>2018-12-13T06:49:31.914Z</updated>
    
    <content type="html"><![CDATA[<h1 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h1><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p><code>Ale.js</code> 可以方便的帮助你在父元素里添加事件，只需添加一个参数 - <code>events</code></p><p>你目前不能在组件定义时添加事件 <code>（1.0版本将会添加）</code>，但是我们允许你在组件使用时添加事件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/* events参数支持全部事件，这里只是用click举例 */</span><br><span class="line">Ale.use(&#123;</span><br><span class="line">    name: &quot;test&quot;,</span><br><span class="line">    el: &quot;#app&quot;,</span><br><span class="line">    events: &#123;</span><br><span class="line">        click: function()&#123;</span><br><span class="line">            alert(&quot;clicked!&quot;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p id="app" class="demo"></p><p>在这里你需要注意，<code>events</code> 参数内部的全部事件名称都不需要加 <code>on</code> 前缀！</p><script src="/js/Ale.min1X.js"></script><script>Ale.define({    name: "test",    template: "Click me!"})Ale.use({    name: "test",    el: "#app",    events: {        click: function(){            alert("clicked!")        }    }})</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;事件&quot;&gt;&lt;a href=&quot;#事件&quot; class=&quot;headerlink&quot; title=&quot;事件&quot;&gt;&lt;/a&gt;事件&lt;/h1&gt;&lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;p&gt;&lt;co
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>State</title>
    <link href="http://cn.alejs.org/2018/11/30/stateCom/"/>
    <id>http://cn.alejs.org/2018/11/30/stateCom/</id>
    <published>2018-11-29T16:00:00.000Z</published>
    <updated>2018-12-10T03:05:15.120Z</updated>
    
    <content type="html"><![CDATA[<h1 id="State"><a href="#State" class="headerlink" title="State"></a>State</h1><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>State（状态）是增强组件灵活性的最重要的手段，简单来说，每一种参数都是一个状态，例如：（反过来说，如果一个组件不需要参数，那么它也不需要状态）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/* 一种状态 */</span><br><span class="line">parameters: &#123;</span><br><span class="line">    str: &quot;Hello&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 第二种状态 */</span><br><span class="line">parameters: &#123;</span><br><span class="line">    str: &quot;OK&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 第三种状态 */</span><br><span class="line">parameters: &#123;</span><br><span class="line">    str: &quot;World&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>状态可以在组件定义时被添加，也可以在 <code>use</code> 之后动态添加，且一个组件可以有多个状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/* 在定义时添加 */</span><br><span class="line">Ale.define(&#123;</span><br><span class="line">    name: &quot;test&quot;,</span><br><span class="line">    template: &quot;Hello &#123;&#123;=$name$&#125;&#125;&quot;,</span><br><span class="line">    state: [&#123; /* 注意！这里是数组！ */</span><br><span class="line">        name: &quot;Ale.js&quot;</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        name: &quot;Ale.js!!!!&quot;</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var aleCom = Ale.use(&#123;</span><br><span class="line">    name: &quot;test&quot;,</span><br><span class="line">    el: &quot;#app&quot;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">/* 这里调用组件对象的setState方法 */</span><br><span class="line">aleCom.setState([&#123; /* 注意！这里是数组！ */</span><br><span class="line">    name: &quot;Ale.js&quot;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    name: &quot;Ale.js!!!!&quot;</span><br><span class="line">&#125;])</span><br></pre></td></tr></table></figure><p>完成之后，这个实例现在还不会显示我们想要的效果，此时我们只需要在定义时给他添加一个参数，parameters，将他初始化一下就好了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Ale.define(&#123;</span><br><span class="line">    name: &quot;test&quot;,</span><br><span class="line">    template: &quot;Hello &#123;&#123;=$name$&#125;&#125;&quot;,</span><br><span class="line">    state: [&#123;</span><br><span class="line">        name: &quot;Ale.js&quot;</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        name: &quot;Ale.js!!!!&quot;</span><br><span class="line">    &#125;],</span><br><span class="line">    parameters: &#123;</span><br><span class="line">        name: &quot;World&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p id="app" class="demo"></p><p>此时我们来测试一下组件的状态是否添加完毕了，要怎么测试呢，只需要在控制台（就在这个页面打开）中输入 <code>aleCom.nextState()</code>，你就会发现上方实例的值变化了。</p><p>当然，有 next 就有 back，现在让我们输入 <code>aleCom.backState()</code>，让组件的状态回去吧！</p><p><br></p><p>这时，如果你在刷新页面后只 next 了一次组件的状态，我们就会发现，这个组件的 <code>backState()</code> 函数返回的值为 <code>false</code>，同时也没有任何效果。</p><p>那么这是为什么呢？因为我们一开始是通过 <code>parameters</code> 参数来渲染组件的，我们刚刚 next 了一次状态，所以并不能返回，这时我们只需要稍微调整一下代码结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Ale.define(&#123;</span><br><span class="line">    name: &quot;test2&quot;,</span><br><span class="line">    template: &quot;Hello &#123;&#123;=$name$&#125;&#125;&quot;,</span><br><span class="line">    state: [&#123;</span><br><span class="line">        name: &quot;World&quot;</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        name: &quot;Ale.js&quot;</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        name: &quot;Ale.js!!!!&quot;</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">var aleCom2 = Ale.use(&#123;</span><br><span class="line">    name: &quot;test2&quot;,</span><br><span class="line">    el: &quot;#app2&quot;</span><br><span class="line">&#125;)</span><br><span class="line">aleCom2.nextState();</span><br></pre></td></tr></table></figure><p id="app2" class="demo"></p><p>现在你在页面上输入 <code>aleCom2.nextState()</code>，然后再输入 <code>aleCom2.backState()</code>，你会发现这个实例正常工作了。</p><h3 id="函数列表"><a href="#函数列表" class="headerlink" title="函数列表"></a>函数列表</h3><p>以下列表为 <code>Ale组件对象</code> 内置的全部和 <code>State</code> 有关的函数：</p><ul><li>nextState() 【前进一个状态】</li><li>backState() 【后退一个状态】</li><li>changeState() 【改变一个状态，需要一个object类型的参数】</li><li>addState() 【增加一个或多个状态，需要一个array类型的参数】</li><li>removeState() 【删除一个状态】</li><li>setState() 【设置状态，nowState会变为0】</li><li>allState() 【返回组件有多少个状态】</li></ul><script src="/js/Ale.min.js"></script><script>Ale.define({    name: "test",    template: "Hello \{\{\=\$name\$\}\}",    state: [{        name: "Ale.js"    }, {        name: "Ale.js!!!!"    }],    parameters: {        name: "World"    }})var aleCom = Ale.use({    name: "test",    el: "#app"})Ale.define({    name: "test2",    template: "Hello \{\{\=\$name\$\}\}",    state: [{        name: "World"    }, {        name: "Ale.js"    }, {        name: "Ale.js!!!!"    }]})var aleCom2 = Ale.use({    name: "test2",    el: "#app2"})aleCom2.nextState();</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;State&quot;&gt;&lt;a href=&quot;#State&quot; class=&quot;headerlink&quot; title=&quot;State&quot;&gt;&lt;/a&gt;State&lt;/h1&gt;&lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>组件基础</title>
    <link href="http://cn.alejs.org/2018/11/29/basicCom/"/>
    <id>http://cn.alejs.org/2018/11/29/basicCom/</id>
    <published>2018-11-28T16:00:00.000Z</published>
    <updated>2018-12-10T04:24:47.846Z</updated>
    
    <content type="html"><![CDATA[<h1 id="组件基础"><a href="#组件基础" class="headerlink" title="组件基础"></a>组件基础</h1><h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><p>你可以使用 <code>Ale.define</code> 函数来定义一个组件，最基础的组件至少要有两个参数（name和template）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/* 定义一个test组件 */</span><br><span class="line">Ale.define(&#123;</span><br><span class="line">    name: &quot;test&quot;, /* 组件名称 */</span><br><span class="line">    template: &quot;Hello World&quot; /* 组件模板 */</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>之后我们使用 <code>Ale.use</code> 函数使用一个组件，注意 <code>name</code> 要一样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Ale.use(&#123;</span><br><span class="line">    name: &quot;test&quot;, /* 组件名称 */</span><br><span class="line">    el: &quot;#app&quot; /* 目标元素 */</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>之后我们就可以看到这个组件已经被渲染出来了：</p><p id="app" class="demo"></p><p class="info-box">注意！在组件每次渲染时，目标元素里的innerHTML属性都将被清空！所以请不要将一个有着其他信息的 DOM 元素作为组件的目标元素！</p><p>当然，你还可以在 <code>template</code> 参数里面写上 <code>Alen</code> 的模板语法，具体模板语法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; &#125;&#125; 执行一段js代码，不输出（双大括号内支持空格）</span><br><span class="line">&#123;&#123;= &#125;&#125; 执行一段js代码，并输出（双大括号内支持空格，但是请不要在 = 号前方空格！否则只会执行，不会输出）【不转义HTML】</span><br><span class="line">&#123;&#123;=! &#125;&#125; 执行一段js代码，并输出（双大括号内支持空格，但是请不要在 = 号前方空格！否则只会执行，不会输出）【转义HTML】</span><br><span class="line"></span><br><span class="line">在 模板 里，你需要使用一对 $ 来包裹在 data 里定义的变量名：</span><br><span class="line">&#123;&#123;=$var$&#125;&#125;</span><br><span class="line"></span><br><span class="line">如果你是在模板里定义的变量，则不需要一对 $</span><br><span class="line">&#123;&#123;var var1 = &quot;Hello&quot;; alert(var1)&#125;&#125;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Ale.define(&#123;</span><br><span class="line">    name: &quot;test2&quot;, /* 组件名称 */</span><br><span class="line">    template: &quot;Hello &#123;&#123;=$name$&#125;&#125;&quot; /* 组件模板 */</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>当然，如果你只在 <code>template</code> 参数里面写上模板语法的话，将没有任何效果，所以我们还需要添加一个叫 <code>parameters</code> 的参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Ale.define(&#123;</span><br><span class="line">    name: &quot;test2&quot;, /* 组件名称 */</span><br><span class="line">    template: &quot;Hello &#123;&#123;=$name$&#125;&#125;&quot;, /* 组件模板 */</span><br><span class="line">    parameters: &#123; /* 定义参数 */</span><br><span class="line">        name: &quot;Ale.js&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>结果：</p><p id="app2" class="demo"></p><p>当你在 <code>define</code> 函数里填写 <code>parameters</code> 时，参数将作为默认参数，如果你在 <code>use</code> 方法时再指定 <code>parameters</code>，那么默认参数将被覆盖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Ale.use(&#123;</span><br><span class="line">    name: &quot;test2&quot;, /* 组件名称（注意这里是test2） */</span><br><span class="line">    el: &quot;#app3&quot;, /* 目标元素 */</span><br><span class="line">    parameters: &#123; /* 指定参数 */</span><br><span class="line">        name: &quot;Ale.js!!!!&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p id="app3" class="demo"></p><p>每当你 <code>use</code> 一个组件时，use函数都会返回一个 <code>Ale组件对象</code>，你可以定义一个变量来接受它：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var aleCom = Ale.use(&#123;</span><br><span class="line">    name: &quot;test2&quot;,</span><br><span class="line">    el: &quot;#app3&quot;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>具体 <code>Ale组件对象</code> 有什么用，请参考之后的教程。</p><h3 id="Ready"><a href="#Ready" class="headerlink" title="Ready?"></a>Ready?</h3><p>准备好了吗？你已经了解了组件的最基本的一些技能，现在请继续往下阅读吧！</p><script src="/js/Ale.min.js"></script><script>Ale.define({    name: "test",    template: "Hello World"})Ale.use({    name: "test",    el: "#app"})Ale.define({    name: "test2",    template: "Hello \{\{\=\$name\$\}\}",    parameters: {        name: "Ale.js"    }})Ale.use({    name: "test2",    el: "#app2"})Ale.use({    name: "test2",    el: "#app3",    parameters: {        name: "Ale.js!!!!"    }})</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;组件基础&quot;&gt;&lt;a href=&quot;#组件基础&quot; class=&quot;headerlink&quot; title=&quot;组件基础&quot;&gt;&lt;/a&gt;组件基础&lt;/h1&gt;&lt;h3 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot; class=&quot;headerlink&quot; title=&quot;开始&quot;&gt;&lt;/a&gt;开始&lt;/h
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>杂项属性</title>
    <link href="http://cn.alejs.org/2018/11/28/otherFun/"/>
    <id>http://cn.alejs.org/2018/11/28/otherFun/</id>
    <published>2018-11-27T16:00:00.000Z</published>
    <updated>2018-12-13T02:31:50.282Z</updated>
    
    <content type="html"><![CDATA[<h1 id="杂项属性"><a href="#杂项属性" class="headerlink" title="杂项属性"></a>杂项属性</h1><h4 id="version"><a href="#version" class="headerlink" title="version"></a>version</h4><p>使用version属性来获取版本信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ale.version /* 注意是属性，不是函数，不需要加小括号！*/</span><br></pre></td></tr></table></figure><p>例如当前官网包含的 <code>Ale.js</code> 的版本为：</p><p id="app" class="demo"><br><br></p><script src="/js/Ale.min1X.js"></script><script>document.querySelector("#app").innerHTML = Ale.version;</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;杂项属性&quot;&gt;&lt;a href=&quot;#杂项属性&quot; class=&quot;headerlink&quot; title=&quot;杂项属性&quot;&gt;&lt;/a&gt;杂项属性&lt;/h1&gt;&lt;h4 id=&quot;version&quot;&gt;&lt;a href=&quot;#version&quot; class=&quot;headerlink&quot; title=&quot;ver
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Alen</title>
    <link href="http://cn.alejs.org/2018/11/28/alen/"/>
    <id>http://cn.alejs.org/2018/11/28/alen/</id>
    <published>2018-11-27T16:00:00.000Z</published>
    <updated>2018-12-09T03:28:32.931Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Alen"><a href="#Alen" class="headerlink" title="Alen"></a>Alen</h1><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>欢迎来到最新模板引擎 <code>Alen</code> 的世界，Alen 拥有着超越其他 <code>99%</code> 模板引擎的性能！</p><p><br></p><p>我们先来看一组数据：<br>【执行替换100个元素的模板】</p><ul><li>Alen (Ale.js): 17~20ms</li><li>Per.js: 26~30ms (对外宣称执行速度超快的JS框架)</li><li>Vue.js: 107~128ms (因为Vue不支持多元素模板替换，所以需要使用for循环)</li><li>Angular: 228~333ms (因为Angular不支持多元素模板替换，所以需要使用for循环)</li></ul><p>造成 <code>Alen</code> 如此快速的原因可能是因为我们的数据和视图并没有绑定起来。这是因为 <code>Alen</code> 本来就只是一个模板引擎，<code>Model</code> 和 <code>View</code> 的绑定将会由 <code>Ale.js</code> 去完成！</p><p><br></p><p>当然，这里在测试时还有一个小问题，实际上我们用模板引擎和其它框架去对比是不正确的，但是由于作者能力有限，不可能把 <code>Angular</code> 和 <code>Vue</code> 等等的模板引擎单独拆分开来（而且我相信在实际开发中也不会这样干），所以只能先这么对比着了。如果你需要数据和视图绑定，那么请使用 <code>Ale.js</code> 的组件功能！</p><h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><p><code>Ale.js</code> 内置了一个名为 <code>data</code> 的函数，调用它即相当于调用 <code>Alen</code> 模板引擎！</p><p><code>data</code> 函数不光支持模板替换，还支持列表输出，你将在下面的章节了解它！（实际上上方章节的对比使用的也是data函数，所以比使用纯 Alen 模板引擎还要慢一些）</p><p>以下实例渲染了一个 HelloWorld 页面：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&apos;app1&apos;&gt;Hello &#123;&#123;=$name$&#125;&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Ale.data(&quot;#app1&quot;, &#123;</span><br><span class="line">    name: &quot;World&quot;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p id="app1" class="demo">Hello World</p><h3 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h3><p>以下介绍了 <code>Alen</code> 所全部拥有的模板语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; &#125;&#125; 执行一段js代码，不输出（双大括号内支持空格）</span><br><span class="line">&#123;&#123;= &#125;&#125; 执行一段js代码，并输出（双大括号内支持空格，但是请不要在 = 号前方空格！否则只会执行，不会输出）【不转义HTML】</span><br><span class="line">&#123;&#123;=! &#125;&#125; 执行一段js代码，并输出（双大括号内支持空格，但是请不要在 = 号前方空格！否则只会执行，不会输出）【转义HTML】</span><br><span class="line"></span><br><span class="line">在 模板 里，你需要使用一对 $ 来包裹在 data 里定义的变量名：</span><br><span class="line">&#123;&#123;=$var$&#125;&#125;</span><br><span class="line"></span><br><span class="line">如果你是在模板里定义的变量，则不需要一对 $</span><br><span class="line">&#123;&#123;var var1 = &quot;Hello&quot;; alert(var1)&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h3><p>使用 <code>Ale.js</code> 的列表渲染是很简单的，只要在你想要渲染的元素上添加一个属性 <code>a-for</code> ，并在 data 里定义一个数组即可！</p><p>例如以下实例，渲染了一个名为 <code>names</code> 的数组：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul id=&apos;app2&apos;&gt;</span><br><span class="line">    &lt;li a-for=&apos;name in names&apos;&gt;Hello &#123;&#123;=$name$&#125;&#125;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Ale.data(&quot;#app2&quot;, &#123;</span><br><span class="line">    names: [&quot;Bill&quot;, &quot;Rick&quot;, &quot;Andy&quot;, &quot;Leo&quot;]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>效果：</p><ul class="demo"><br>    <li>Hello Bill</li><br>    <li>Hello Rick</li><br>    <li>Hello Andy</li><br>    <li>Hello Leo</li><br></ul><p>当然，你可能已经发现了，<code>a-for</code> 属性需要的值为 <code>item in items</code> 格式！其中的 <code>item</code> 为要渲染成为的变量名称，<code>items</code> 为要渲染的数组名称。</p><p>同时，我们专门为多级列表渲染进行了优化，请看以下实例，渲染了这些人的名字，之后又渲染出了他们的房子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul id=&apos;app3&apos;&gt;</span><br><span class="line">    &lt;li a-for=&apos;person in people&apos;&gt;</span><br><span class="line">        &#123;&#123;=$person$.name&#125;&#125;&apos;s house in:</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li a-for=&apos;house in houses&apos;&gt;</span><br><span class="line">                &#123;&#123;=$house$&#125;&#125;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Ale.data(&quot;#app3&quot;, &#123;</span><br><span class="line">    people: [&#123;</span><br><span class="line">        name: &quot;Bill&quot;,</span><br><span class="line">        houses: [&quot;China&quot;,&quot;US&quot;]</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        name: &quot;Rick&quot;,</span><br><span class="line">        houses: [&quot;China&quot;]</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        name: &quot;Andy&quot;,</span><br><span class="line">        houses: [&quot;US&quot;]</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        name: &quot;Leo&quot;,</span><br><span class="line">        houses: [&quot;Mexico&quot;,&quot;US&quot;]</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>结果：</p><ul class="demo"><br>    <li>Bill’s house in:<br>        <ul><br>            <li>China</li><br>            <li>US</li><br>        </ul><br>    </li><br>    <li>Rick’s house in:<br>        <ul><br>            <li>China</li><br>        </ul><br>    </li><br>    <li>Andy’s house in:<br>        <ul><br>            <li>US</li><br>        </ul><br>    </li><br>    <li>Leo’s house in:<br>        <ul><br>            <li>Mexico</li><br>            <li>US</li><br>        </ul><br>    </li><br></ul><p>当然，如果你的列表很特殊，必要的时候需要进入两个object里面才能获取到数组，这时候你就需要在子元素的 <code>a-for</code> 属性上面用 <code>.</code> 来分隔目录！但是需要注意，你选中的父元素里面的子元素的 <code>a-for</code> 属性是不支持 <code>.</code> 的，例如现在有这么一个数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    arr: [&#123;</span><br><span class="line">        bill: [&#123;</span><br><span class="line">            say: &#123;</span><br><span class="line">                sen: [&quot;Hello&quot;, &quot;ok&quot;]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;],</span><br><span class="line">        andy: [&#123;</span><br><span class="line">            say: &#123;</span><br><span class="line">                sen: [&quot;你好&quot;, &quot;haha&quot;]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你想分别输出 <code>bill</code> 和 <code>andy</code>，那么你就需要写上两个列表，而不是这么写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 这么写是错误的！请勿模仿 --&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li a-for=&apos;person in arr.bill&apos;&gt; &lt;!-- 错误！这里不能加&quot;.&quot;，因为是直接子元素，所以不支持&quot;.&quot; --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><p>所以这时你就需要分隔他们变成两个数组：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    bill: [&#123;</span><br><span class="line">        say: &#123;</span><br><span class="line">            sen: [&quot;Hello&quot;, &quot;ok&quot;]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;]</span><br><span class="line"></span><br><span class="line">    andy: [&#123;</span><br><span class="line">        say: &#123;</span><br><span class="line">            sen: [&quot;你好&quot;, &quot;haha&quot;]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后分别输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li a-for=&apos;person in bill&apos;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li a-for=&apos;person in andy&apos;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><p>那么如果我们想输出 <code>say</code> 里面的 <code>sen</code>，我们就需要这么写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li a-for=&apos;person in bill&apos;&gt; &lt;!-- 注意这里的目录结构，进入bill目录下 --&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li a-for=&apos;sentence in say.sen&apos;&gt; &lt;!-- 进入bill目录下的say目录下的sen --&gt;</span><br><span class="line"></span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li a-for=&apos;person in andy&apos;&gt; &lt;!-- 注意这里的目录结构，进入andy目录下 --&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li a-for=&apos;sentence in say.sen&apos;&gt;  &lt;!-- 进入andy目录下的say目录下的sen --&gt;</span><br><span class="line"></span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Alen&quot;&gt;&lt;a href=&quot;#Alen&quot; class=&quot;headerlink&quot; title=&quot;Alen&quot;&gt;&lt;/a&gt;Alen&lt;/h1&gt;&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>介绍</title>
    <link href="http://cn.alejs.org/2018/11/27/introduction/"/>
    <id>http://cn.alejs.org/2018/11/27/introduction/</id>
    <published>2018-11-26T16:00:00.000Z</published>
    <updated>2018-12-13T06:28:05.526Z</updated>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><h3 id="什么是-Ale-js"><a href="#什么是-Ale-js" class="headerlink" title="什么是 Ale.js?"></a>什么是 Ale.js?</h3><p>Ale.js (中文意思: 啤酒) 是一套只针对用户视图操作的框架，它信奉：万物皆组件。与其它大型框架不同的是，它的核心只关注视图层，并使用 State 状态流为你复杂的页面提供驱动。更重要的是，它能帮助你摆脱复杂的视图与数据的关系，让你全身心投入数据的处理之中，不用考虑任何与视图有关的内容。就像其他 MVC、MVVM、MVP 框架一样，只不过它支持到了 <code>IE8</code>。</p><p><br></p><p>而最重要的是，Ale.js 内部极具灵活性的构造可以有效帮助你提升页面灵活性，让你用更少的代码做更多的事，例如我们使用 React 和 Vue 分别实现一个定时器每隔1秒刷新需要：</p><ul><li>Ale (22行代码)</li><li>Vue（23行代码）</li><li>React (30行代码)</li></ul><p>例如：</p><p id="app2" class="demo"><br><br></p><h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><p class="info-box">我们的官方指南假设你已了解关于 HTML、CSS 和 JavaScript 的初级知识。如果你刚开始学习前端开发，将框架作为你的第一步可能不是最好的主意——掌握好基础知识再来吧！之前有其它框架的使用经验会有帮助，但这不是必需的。</p><p>尝试使用 <code>Ale.js</code> 最简单的例子莫过于制作一个 <code>HelloWorld</code> 页面，现在你可以新建一个 <code>.html</code> 文件，然后尝试在浏览器中打开它。</p><p>我们假设你已经在 Github 上下载好了 <code>Ale.js</code> 的版本文件，你可以看到目录结构是这样的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">├─ Ale.js /* Ale.js 核心库（开发版本）*/</span><br><span class="line">└─Ale.min.js /* Ale.js 核心库（生产版本）*/</span><br></pre></td></tr></table></figure></p><p>我们首先需要先使用 <code>&lt;script&gt;</code> 标签引入 <code>Ale.js</code> 文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 开发环境版本，更好的帮助你了解 Ale.js 的内部执行原理 --&gt;</span><br><span class="line">&lt;script src=&quot;Ale.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>或者：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 生产环境版本，压缩了代码 --&gt;</span><br><span class="line">&lt;script src=&quot;Ale.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h3><p>Ale.js 可以帮助你构建快速灵活的 JS 响应式页面，也许在这一篇教程里你无法体会。</p><p>先让我们来制作一个简单的 <code>HelloWorld</code> 页面吧！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&apos;app&apos;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/* 制作一个简易 HelloWorld 页面 */</span><br><span class="line">Ale.define(&#123;</span><br><span class="line">    name: &quot;test&quot;,</span><br><span class="line">    template: &quot;&#123;&#123;=$message$&#125;&#125;&quot;,</span><br><span class="line">    states: [&#123;</span><br><span class="line">        message: &quot;Hello World&quot;</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">var app = Ale.use(&#123;</span><br><span class="line">    name: &quot;test&quot;,</span><br><span class="line">    el: &quot;#app&quot;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>效果：</p><p id="app" class="demo"></p><p>恭喜你！你现在已经创建了一个属于你自己的 Ale.js 页面！看起来这跟渲染一个字符串模板非常类似，但是 Ale.js 在背后做了大量工作，数据和 DOM 已经被建立了关联，所有东西都是响应式的。要怎么确认呢？打开你的浏览器的 JavaScript 控制台 (就在这个页面打开)，并输入 <code>app.changeState({message: &quot;Hello Ale.js&quot;})</code> 的值，你将看到上例相应地更新。</p><p><br></p><p>如果仅仅实现这些效果不能让你满足的话，就请现在开始学习吧！</p><script src="/js/Ale.min1X.js"></script><script>Ale.define({    name: "test",    template: "\{\{\=\$message\$\}\}",    states: [{        message: "Hello World"    }]})var app = Ale.use({    name: "test",    el: "#app"})Ale.define({   name: "timer",   template: "Time：\{\{\=\!\$time\$\}\}",   states: function(){       return [{           time: this.time       }]   },   data: {       time: new Date().toLocaleTimeString()   },   life: {       Mounting: function(){           this.timer = setInterval(() => {               this.changeData("time", new Date().toLocaleTimeString());           }, 1000);       },       UnMounting: function(){           clearInterval(this.timer);       }   }})Ale.use({name: "timer",el: "#app2"})</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;h3 id=&quot;什么是-Ale-js&quot;&gt;&lt;a href=&quot;#什么是-Ale-js&quot; class=&quot;headerlink&quot; title=&quot;什么是 A
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>安装</title>
    <link href="http://cn.alejs.org/2018/11/26/installation/"/>
    <id>http://cn.alejs.org/2018/11/26/installation/</id>
    <published>2018-11-25T16:00:00.000Z</published>
    <updated>2018-12-13T01:55:41.910Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h3 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h3><p>一些老版本的浏览器现在已经没有多少用户正在使用了，所以 Ale.js 选择最低支持到 <code>IE8</code>。</p><p><br></p><p>以下是详细浏览器兼容列表:</p><ul><li>IE 8</li><li>Chrome 4</li><li>Firefox 3.5</li><li>Opera 10</li><li>Safari 3.1</li></ul><h3 id="版本信息"><a href="#版本信息" class="headerlink" title="版本信息"></a>版本信息</h3><p><strong>最新稳定版本</strong>: none</p><p><strong>最新版本</strong>: 1.0-Alpha</p><p>更详细的版本更新信息请访问 <a href="https://github.com/Ale-js/ale" target="_blank" rel="noopener">GitHub</a>.</p><h4 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h4><p>目前 <code>Ale.js</code> 处于 <code>1.0-Alpha</code> 版本，还没有正式版发布，我们强烈希望你发邮件告诉我们一些关于 <code>Ale.js</code> 的意见或建议，只要是合理和好建议，我们都会在 <code>1.0</code> 版本加入的！<strong>【邮箱：<a href="mailto:bill-dong@hotmail.com" target="_blank" rel="noopener">bill-dong@hotmail.com</a>】</strong></p><p><br></p><p><strong>何不去 <a href="https://github.com/Ale-js/ale" target="_blank" rel="noopener">Github</a> 上给我们几个 Star？</strong></p><h3 id="直接-lt-script-gt-引入"><a href="#直接-lt-script-gt-引入" class="headerlink" title="直接 &lt;script&gt; 引入"></a>直接 &lt;script&gt; 引入</h3><p>直接使用 &lt;script&gt; 标签引入 Ale.js 文件. <code>Ale</code> 将会被注册为全局变量.</p><p class="info-box">我们不推荐你在生产环境中引入开发版本的 <code>Ale.js</code> 文件，因为这将会降低你的文件加载速度！同时还会减慢 <code>Ale.js</code> 的代码执行速度！</p><p><a href="https://github.com/Ale-js/ale" target="_blank" rel="noopener"><button class="post-btn">开发版本</button></a></p><p><a href="https://github.com/Ale-js/ale" target="_blank" rel="noopener"><button class="post-btn">压缩版本</button></a></p><h3 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h3><p><code>CDN</code> 功能现在还没有开启，请等待 <code>1.0</code> 正式版发布！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h1&gt;&lt;h3 id=&quot;兼容性&quot;&gt;&lt;a href=&quot;#兼容性&quot; class=&quot;headerlink&quot; title=&quot;兼容性&quot;&gt;&lt;/a&gt;兼容性&lt;/h3&gt;&lt;p
      
    
    </summary>
    
    
  </entry>
  
</feed>
